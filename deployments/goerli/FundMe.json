{
  "address": "0x8afCF509CA84035B532D59848677B5b85273f035",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2d153eb1c4fcd7f7887667e5125b38ebe98051b01adab4808a8a9f17b5c72430",
  "receipt": {
    "to": null,
    "from": "0x76B2fdb766387879Af568004836B8DeE63Ee15fC",
    "contractAddress": "0x8afCF509CA84035B532D59848677B5b85273f035",
    "transactionIndex": 34,
    "gasUsed": "923496",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf24c8b4baf44dbd32c23ccec13777919c3daf96662fa24128cea4a4b287525aa",
    "transactionHash": "0x2d153eb1c4fcd7f7887667e5125b38ebe98051b01adab4808a8a9f17b5c72430",
    "logs": [],
    "blockNumber": 7950876,
    "cumulativeGasUsed": "5265640",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "5f37caa03d2e2ca47f96d1fc4a21ee1e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract FundMe {\\n    using priceConverter for uint256;\\n\\n    //  Using For\\n    //  The directive using A for B; can be used to attach library functions of library A to a given type B. These functions will used the caller type as their first parameter (identified using self).\\n\\n    uint256 public constant MINIMUM_USD = 25;\\n    address[] public funders;\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    address public immutable i_owner;\\n    AggregatorV3Interface public priceFeed;\\n\\n    // using immutable and constant variables to make it gas efficient\\n    constructor(address priceFeedAddress) {\\n        // deployer of the contract is the first who runs constructor\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        _; // all the code here whoever calls the onlyOwner modifier\\n    }\\n\\n    function fund() public payable {\\n        // want to be able to set a minimum fund.\\n        // 1. How do we send ETH to this contract?\\n        // require method says if the first statement is false then revert with the error.\\n\\n        // msg.value is uint type which get passed to getConversionRate library funtion.\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Didn't send enough\\\"\\n        ); // 1e18 == 1 * 10 ** 18 (1 Eth in wei)\\n        funders.push(msg.sender);\\n        // storing the amount funded\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        // What is reverting?\\n        // undo any action before, and send remaining gas back.\\n    }\\n\\n    function Withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0; //reset\\n        }\\n        // reset the array\\n        funders = new address[](0);\\n        // actually withdraw the funds\\n        // transfer\\n        // send\\n        // call\\n        payable(msg.sender).transfer(address(this).balance);\\n        // send\\n        bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        require(sendSuccess, \\\"Send failed\\\");\\n        // call (best option)\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // if the fund is received by contract accidently\\n    // we use receive function and fallback function to handle.\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0xe4716a8a98bc0677723123498347b7de0a3b1bc17e9d856781d5629ed584f025\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary priceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // ABI\\n        // Address\\n        // Using chain link api to get realtime price of 1 eth to usd\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (\\n            ,\\n            /*uint80 roundID*/\\n            int price, /*uint startedAt*/ /*uint timeStamp*/ /*uint80 answeredInRound*/\\n            ,\\n            ,\\n\\n        ) = priceFeed.latestRoundData();\\n        return uint256(price / 1e8);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // should return dollar\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x16a0dd1bd3cfe92dec27e20b218cbf73eda49756f5c97cfcd41e63b30032a460\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620010c7380380620010c783398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b608051610f5562000172600039600081816102f6015261062b0152610f556000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633e47d6f31461008d57806357ea89b6146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610862565b6102dc565b6040516100c191906108a8565b60405180910390f35b3480156100d657600080fd5b506100df6102f4565b005b3480156100ed57600080fd5b506100f66105fe565b60405161010391906108a8565b60405180910390f35b34801561011857600080fd5b50610121610603565b60405161012e9190610922565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610629565b604051610163919061094c565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190610993565b61064d565b6040516101a0919061094c565b60405180910390f35b60196101e0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461068c90919063ffffffff16565b1015610221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021890610a1d565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d39190610a6c565b92505081905550565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037990610b0e565b60405180910390fd5b60005b60008054905081101561042d5760008082815481106103a7576103a6610b2e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042590610b5d565b915050610385565b50600067ffffffffffffffff81111561044957610448610ba6565b5b6040519080825280602002602001820160405280156104775781602001602082028036833780820191505090505b506000908051906020019061048d929190610758565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104d4573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054590610c21565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161057490610c72565b60006040518083038185875af1925050503d80600081146105b1576040519150601f19603f3d011682016040523d82523d6000602084013e6105b6565b606091505b50509050806105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190610cd3565b60405180910390fd5b5050565b601981565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061065d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610698836106c8565b90506000670de0b6b3a764000085836106b19190610cf3565b6106bb9190610d7c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a9190610e3a565b5050509150506305f5e100816107509190610eb5565b915050919050565b8280548282559060005260206000209081019282156107d1579160200282015b828111156107d05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610778565b5b5090506107de91906107e2565b5090565b5b808211156107fb5760008160009055506001016107e3565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082f82610804565b9050919050565b61083f81610824565b811461084a57600080fd5b50565b60008135905061085c81610836565b92915050565b600060208284031215610878576108776107ff565b5b60006108868482850161084d565b91505092915050565b6000819050919050565b6108a28161088f565b82525050565b60006020820190506108bd6000830184610899565b92915050565b6000819050919050565b60006108e86108e36108de84610804565b6108c3565b610804565b9050919050565b60006108fa826108cd565b9050919050565b600061090c826108ef565b9050919050565b61091c81610901565b82525050565b60006020820190506109376000830184610913565b92915050565b61094681610824565b82525050565b6000602082019050610961600083018461093d565b92915050565b6109708161088f565b811461097b57600080fd5b50565b60008135905061098d81610967565b92915050565b6000602082840312156109a9576109a86107ff565b5b60006109b78482850161097e565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610a076012836109c0565b9150610a12826109d1565b602082019050919050565b60006020820190508181036000830152610a36816109fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a778261088f565b9150610a828361088f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ab757610ab6610a3d565b5b828201905092915050565b7f53656e646572206973206e6f74206f776e657221000000000000000000000000600082015250565b6000610af86014836109c0565b9150610b0382610ac2565b602082019050919050565b60006020820190508181036000830152610b2781610aeb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b688261088f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b9b57610b9a610a3d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c0b600b836109c0565b9150610c1682610bd5565b602082019050919050565b60006020820190508181036000830152610c3a81610bfe565b9050919050565b600081905092915050565b50565b6000610c5c600083610c41565b9150610c6782610c4c565b600082019050919050565b6000610c7d82610c4f565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cbd600b836109c0565b9150610cc882610c87565b602082019050919050565b60006020820190508181036000830152610cec81610cb0565b9050919050565b6000610cfe8261088f565b9150610d098361088f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d4257610d41610a3d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d878261088f565b9150610d928361088f565b925082610da257610da1610d4d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610dcc81610dad565b8114610dd757600080fd5b50565b600081519050610de981610dc3565b92915050565b6000819050919050565b610e0281610def565b8114610e0d57600080fd5b50565b600081519050610e1f81610df9565b92915050565b600081519050610e3481610967565b92915050565b600080600080600060a08688031215610e5657610e556107ff565b5b6000610e6488828901610dda565b9550506020610e7588828901610e10565b9450506040610e8688828901610e25565b9350506060610e9788828901610e25565b9250506080610ea888828901610dda565b9150509295509295909350565b6000610ec082610def565b9150610ecb83610def565b925082610edb57610eda610d4d565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610f1457610f13610a3d565b5b82820590509291505056fea2646970667358221220d16c0a07e5d6b7d5ac72691ffde6940e1f7fcf6586b8feb819d9c78bc239f31664736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633e47d6f31461008d57806357ea89b6146100ca5780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af9190610862565b6102dc565b6040516100c191906108a8565b60405180910390f35b3480156100d657600080fd5b506100df6102f4565b005b3480156100ed57600080fd5b506100f66105fe565b60405161010391906108a8565b60405180910390f35b34801561011857600080fd5b50610121610603565b60405161012e9190610922565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610629565b604051610163919061094c565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190610993565b61064d565b6040516101a0919061094c565b60405180910390f35b60196101e0600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461068c90919063ffffffff16565b1015610221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021890610a1d565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102d39190610a6c565b92505081905550565b60016020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610382576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037990610b0e565b60405180910390fd5b60005b60008054905081101561042d5760008082815481106103a7576103a6610b2e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061042590610b5d565b915050610385565b50600067ffffffffffffffff81111561044957610448610ba6565b5b6040519080825280602002602001820160405280156104775781602001602082028036833780820191505090505b506000908051906020019061048d929190610758565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104d4573d6000803e3d6000fd5b5060003373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505090508061054e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054590610c21565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff164760405161057490610c72565b60006040518083038185875af1925050503d80600081146105b1576040519150601f19603f3d011682016040523d82523d6000602084013e6105b6565b606091505b50509050806105fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f190610cd3565b60405180910390fd5b5050565b601981565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061065d57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610698836106c8565b90506000670de0b6b3a764000085836106b19190610cf3565b6106bb9190610d7c565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073a9190610e3a565b5050509150506305f5e100816107509190610eb5565b915050919050565b8280548282559060005260206000209081019282156107d1579160200282015b828111156107d05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610778565b5b5090506107de91906107e2565b5090565b5b808211156107fb5760008160009055506001016107e3565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061082f82610804565b9050919050565b61083f81610824565b811461084a57600080fd5b50565b60008135905061085c81610836565b92915050565b600060208284031215610878576108776107ff565b5b60006108868482850161084d565b91505092915050565b6000819050919050565b6108a28161088f565b82525050565b60006020820190506108bd6000830184610899565b92915050565b6000819050919050565b60006108e86108e36108de84610804565b6108c3565b610804565b9050919050565b60006108fa826108cd565b9050919050565b600061090c826108ef565b9050919050565b61091c81610901565b82525050565b60006020820190506109376000830184610913565b92915050565b61094681610824565b82525050565b6000602082019050610961600083018461093d565b92915050565b6109708161088f565b811461097b57600080fd5b50565b60008135905061098d81610967565b92915050565b6000602082840312156109a9576109a86107ff565b5b60006109b78482850161097e565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b6000610a076012836109c0565b9150610a12826109d1565b602082019050919050565b60006020820190508181036000830152610a36816109fa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a778261088f565b9150610a828361088f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ab757610ab6610a3d565b5b828201905092915050565b7f53656e646572206973206e6f74206f776e657221000000000000000000000000600082015250565b6000610af86014836109c0565b9150610b0382610ac2565b602082019050919050565b60006020820190508181036000830152610b2781610aeb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610b688261088f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b9b57610b9a610a3d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f53656e64206661696c6564000000000000000000000000000000000000000000600082015250565b6000610c0b600b836109c0565b9150610c1682610bd5565b602082019050919050565b60006020820190508181036000830152610c3a81610bfe565b9050919050565b600081905092915050565b50565b6000610c5c600083610c41565b9150610c6782610c4c565b600082019050919050565b6000610c7d82610c4f565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610cbd600b836109c0565b9150610cc882610c87565b602082019050919050565b60006020820190508181036000830152610cec81610cb0565b9050919050565b6000610cfe8261088f565b9150610d098361088f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d4257610d41610a3d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d878261088f565b9150610d928361088f565b925082610da257610da1610d4d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610dcc81610dad565b8114610dd757600080fd5b50565b600081519050610de981610dc3565b92915050565b6000819050919050565b610e0281610def565b8114610e0d57600080fd5b50565b600081519050610e1f81610df9565b92915050565b600081519050610e3481610967565b92915050565b600080600080600060a08688031215610e5657610e556107ff565b5b6000610e6488828901610dda565b9550506020610e7588828901610e10565b9450506040610e8688828901610e25565b9350506060610e9788828901610e25565b9250506080610ea888828901610dda565b9150509295509295909350565b6000610ec082610def565b9150610ecb83610def565b925082610edb57610eda610d4d565b5b600160000383147f800000000000000000000000000000000000000000000000000000000000000083141615610f1457610f13610a3d565b5b82820590509291505056fea2646970667358221220d16c0a07e5d6b7d5ac72691ffde6940e1f7fcf6586b8feb819d9c78bc239f31664736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 320,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 324,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 329,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}